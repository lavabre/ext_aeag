<?php

namespace Aeag\EdlBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Response;

/**
 * EtatMeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * 
 */
class EtatMeRepository extends EntityRepository {

    public function getLastPropositionSuperviseur($euCd, $cdEtat) {

        $query = "select p ";
        $query = $query . " from Aeag\EdlBundle\Entity\EtatMeProposed p";
        $query = $query . " where p.euCd = '" . $euCd . "' and p.cdEtat = '" . $cdEtat . "' and p.role ='expert'";
        $query = $query . " order by p.propositionDate desc";
        $qb = $this->_em->createQuery($query);
        //print_r($query);
        return $qb->getResult();

//          
//        $qb = $this->_em->createQueryBuilder();
//
//        try {
//            $query = $qb->select('p') // string 'u' is converted to array internally
//                    ->from('Aeag\EdlBundle\Entity\EtaMeProposed', 'p')
//                    ->where('p.euCd = :euCd and p.cdPression = :cdPression and p.role = :role')
//                    ->setParameter('euCd', $euCd)
//                    ->setParameter('cdEtat', $cdEtat)
//                    ->setParameter('role', 'expert')
//                    ->orderBy('p.propositionDate', 'DESC')
//                    ->setMaxResults(1)
//                    ->getQuery();
//
//            $r = $query->getResult();
//            return reset($r);
//        } catch (Exception $e) {
//            return null;
//        }
    }

    public function getLastProposition($euCd, $cdEtat) {

        $query = "select p ";
        $query = $query . " from Aeag\EdlBundle\Entity\EtatMeProposed p";
          $query = $query . " , Aeag\EdlBundle\Entity\Utilisateur u";
        $query = $query . " where upper(u.username) like 'STL%'";
        $query = $query . " and u.id = p.utilisateur";
        $query = $query . " and p.euCd = '" . $euCd . "' and p.cdEtat = '" . $cdEtat . "'";
        $query = $query . " order by p.propositionDate desc";
        $qb = $this->_em->createQuery($query);
        //print_r($query);
        return $qb->getResult();
//        
//        $qb = $this->_em->createQueryBuilder();
//
//        try {
//            $query = $qb->select('p') // string 'u' is converted to array internally
//                    ->from('Aeag\EdlBundle\Entity\EtatMeProposed', 'p')
//                    ->where('p.euCd = :euCd and p.cdEtat = :cdEtat')
//                    ->setParameter('euCd', $euCd)
//                    ->setParameter('cdEtat', $cdEtat)
//                    ->orderBy('p.propositionDate', 'DESC')
//                    ->setMaxResults(1)
//                    ->getQuery();
//
//            $r = $query->getResult();
//            return reset($r);
//        } catch (Exception $e) {
//            return null;
//        }
    }

    public function getEtatMe($code, $cdGroupe) {

        $query = "select e from Aeag\EdlBundle\Entity\MasseEau m";
        $query = $query . " , Aeag\EdlBundle\Entity\EtatType t";
        $query = $query . " , Aeag\EdlBundle\Entity\EtatMe e";
        $query = $query . " where m.euCd = e.euCd and e.cdEtat = t.cdEtat and m.typeMe = t.typeMe and m.euCd = '" . $code . "' and t.cdGroupe = '" . $cdGroupe . "'";
        //$query = $query . " and e.cdEtat != 'RW_ECO_VAL'";
        $query = $query . " order by t.ordre";
        // return new Response('query  : ' . $query);

        try {
            $r = $this->_em->createQuery($query)
                    ->getResult();
            return $r;
        } catch (Exception $e) {
            return null;
        }
    }

    public function getNbEtatMe($code, $cdGroupe) {

        $query = "select count(e.valeur) from Aeag\EdlBundle\Entity\MasseEau m";
        $query = $query . " , Aeag\EdlBundle\Entity\EtatType t";
        $query = $query . " , Aeag\EdlBundle\Entity\EtatMe e";
        $query = $query . " where m.euCd = e.euCd and e.cdEtat = t.cdEtat and m.typeMe = t.typeMe and m.euCd = '" . $code . "' and t.cdGroupe = '" . $cdGroupe . "'";
        //$query = $query . " and e.cdEtat != 'RW_ECO_VAL'";
        // print_r('query  : ' . $query);

        try {
            $r = $this->_em->createQuery($query)
                    ->getSingleScalarResult();
            ;
            return $r;
        } catch (Exception $e) {
            return null;
        }
    }

    public function getDerniereProposition($euCd) {

        $query = "select p ";
        $query = $query . " from Aeag\EdlBundle\Entity\EtatMeProposed p";
        $query = $query . " , Aeag\EdlBundle\Entity\Utilisateur u";
        $query = $query . " where upper(u.username) like 'STL%'";
        $query = $query . " and u.id = p.utilisateur";
        $query = $query . " and p.euCd = '" . $euCd . "'";
        $query = $query . " order by p.propositionDate desc";
        $qb = $this->_em->createQuery($query);
        //print_r($query);
        return $qb->getResult();

//         
//        
//        $qb = $this->_em->createQueryBuilder();
//
//        try {
//            $query = $qb->select('p') // string 'u' is converted to array internally
//                    ->from('Aeag\EdlBundle\Entity\EtatMeProposed', 'p')
//                    ->where('p.euCd = :euCd ')
//                    ->setParameter('euCd', $euCd)
//                    ->orderBy('p.propositionDate', 'DESC')
//                    ->setMaxResults(1)
//                    ->getQuery();
//
//            $r = $query->getResult();
//            return reset($r);
//        } catch (Exception $e) {
//            return null;
//        }
    }

}
